--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.2.23.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 3/12/2022 10:15:39 AM
-- Server version: 5.5.5-10.3.34-MariaDB-0ubuntu0.20.04.1
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE `MISA.WEB01.LNTGIANG`;

--
-- Drop procedure `Proc_CheckEmployeeCode`
--
DROP PROCEDURE IF EXISTS Proc_CheckEmployeeCode;

--
-- Drop procedure `Proc_DeleteEmployee`
--
DROP PROCEDURE IF EXISTS Proc_DeleteEmployee;

--
-- Drop procedure `Proc_GetEmployeeById`
--
DROP PROCEDURE IF EXISTS Proc_GetEmployeeById;

--
-- Drop procedure `Proc_GetEmployees`
--
DROP PROCEDURE IF EXISTS Proc_GetEmployees;

--
-- Drop procedure `Proc_GetPaggingEmployee`
--
DROP PROCEDURE IF EXISTS Proc_GetPaggingEmployee;

--
-- Drop procedure `Proc_InsertEmployee`
--
DROP PROCEDURE IF EXISTS Proc_InsertEmployee;

--
-- Drop procedure `Proc_UpdateEmployee`
--
DROP PROCEDURE IF EXISTS Proc_UpdateEmployee;

--
-- Drop table `Employee`
--
DROP TABLE IF EXISTS Employee;

--
-- Drop procedure `Proc_GetDepartmentById`
--
DROP PROCEDURE IF EXISTS Proc_GetDepartmentById;

--
-- Drop procedure `Proc_GetDepartments`
--
DROP PROCEDURE IF EXISTS Proc_GetDepartments;

--
-- Drop table `Department`
--
DROP TABLE IF EXISTS Department;

--
-- Set default database
--
USE `MISA.WEB01.LNTGIANG`;

--
-- Create table `Department`
--
CREATE TABLE Department (
  DepartmentId char(36) NOT NULL COMMENT 'Id của phòng ban',
  DepartmentCode varchar(20) DEFAULT NULL COMMENT 'Mã phòng ban',
  DepartmentName varchar(100) DEFAULT NULL COMMENT 'Tên phòng ban',
  CreatedDate datetime DEFAULT NULL COMMENT 'Thời gian tạo',
  CreatedBy char(36) DEFAULT NULL COMMENT 'Người tạo',
  ModifiedDate datetime DEFAULT NULL COMMENT 'Thời gian sửa gần nhất',
  ModifiedBy varchar(255) DEFAULT NULL COMMENT 'Người sửa gần nhất',
  PRIMARY KEY (DepartmentId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 278,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

DELIMITER $$

--
-- Create procedure `Proc_GetDepartments`
--
CREATE DEFINER = 'dev'@'%'
PROCEDURE Proc_GetDepartments ()
BEGIN
  SELECT
    *
  FROM Department d;
END
$$

--
-- Create procedure `Proc_GetDepartmentById`
--
CREATE DEFINER = 'dev'@'%'
PROCEDURE Proc_GetDepartmentById (IN ms_DepartmentId char(36))
BEGIN
  SELECT
    *
  FROM Department d
  WHERE d.DepartmentId = ms_DepartmentId;
END
$$

DELIMITER ;

--
-- Create table `Employee`
--
CREATE TABLE Employee (
  EmployeeId char(36) NOT NULL COMMENT 'Id của nhân viên',
  EmployeeCode varchar(20) NOT NULL COMMENT 'Mã nhân viên',
  FullName varchar(100) NOT NULL COMMENT 'Họ và tên nhân viên',
  DateOfBirth date DEFAULT NULL COMMENT 'Ngày sinh',
  Gender int(11) DEFAULT NULL COMMENT 'Giới tính(0-Nữ, 1-Nam)',
  IdentityNumber varchar(25) DEFAULT NULL COMMENT 'Số CMND/CCCD',
  IdentityDate date DEFAULT NULL COMMENT 'Ngày cấp CMND/CCCD',
  IdentityPlace varchar(255) DEFAULT NULL COMMENT 'Nơi cấp CMND/CCCD',
  Email varchar(100) DEFAULT NULL COMMENT 'Địa chỉ email',
  PhoneNumber varchar(50) DEFAULT NULL COMMENT 'Số điện thoại di động',
  Address varchar(255) DEFAULT NULL COMMENT 'Địa chỉ',
  TelephoneNumber varchar(50) DEFAULT NULL COMMENT 'Số điện thoại cố định',
  BankAccountNumber varchar(25) DEFAULT NULL COMMENT 'Số tài khoản',
  BankName varchar(255) DEFAULT NULL COMMENT 'Tên ngân hàng',
  BankBranchName varchar(255) DEFAULT NULL COMMENT 'Tên chi nhánh ngân hàng',
  DepartmentId char(36) NOT NULL COMMENT 'Id của phòng ban',
  CreatedDate datetime DEFAULT NULL COMMENT 'Thời gian tạo',
  CreatedBy char(36) DEFAULT NULL COMMENT 'Người tạo',
  ModifiedDate datetime DEFAULT NULL COMMENT 'Thời gian sửa cuối cùng',
  ModifiedBy char(36) DEFAULT NULL,
  PRIMARY KEY (EmployeeId)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 484,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `UK_Employee_EmployeeCode` on table `Employee`
--
ALTER TABLE Employee
ADD UNIQUE INDEX UK_Employee_EmployeeCode (EmployeeCode);

--
-- Create foreign key
--
ALTER TABLE Employee
ADD CONSTRAINT FK_Employee_DepartmentId FOREIGN KEY (DepartmentId)
REFERENCES Department (DepartmentId) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `Proc_UpdateEmployee`
--
CREATE DEFINER = 'dev'@'%'
PROCEDURE Proc_UpdateEmployee (IN ms_EmployeeId char(36), IN ms_EmployeeCode varchar(20), IN ms_FullName varchar(100), IN ms_DateOfBirth date, IN ms_Gender int, IN ms_IdentityNumber varchar(255), IN ms_IdentityDate date, IN ms_IdentityPlace varchar(255), IN ms_Email varchar(100), IN ms_PhoneNumber varchar(50), IN ms_Address varchar(255), IN ms_TelephoneNumber varchar(50), IN ms_BankAccountNumber varbinary(25), IN ms_BankName varchar(255), IN ms_BankBranchName varchar(255), IN ms_DepartmentId char(36))
BEGIN
  UPDATE Employee e
  SET e.EmployeeCode = ms_EmployeeCode,
      e.FullName = ms_FullName,
      e.DateOfBirth = ms_DateOfBirth,
      e.Gender = ms_Gender,
      e.IdentityNumber = ms_IdentityNumber,
      e.IdentityDate = ms_IdentityDate,
      e.IdentityPlace = ms_IdentityPlace,
      e.Email = ms_Email,
      e.PhoneNumber = ms_PhoneNumber,
      e.Address = ms_Address,
      e.TelephoneNumber = ms_TelephoneNumber,
      e.BankAccountNumber = ms_BankAccountNumber,
      e.BankName = ms_BankName,
      e.BankBranchName = ms_BankBranchName,
      e.DepartmentId = ms_DepartmentId,
      ModifiedDate = NOW()
  WHERE e.EmployeeId = ms_EmployeeId;
END
$$

--
-- Create procedure `Proc_InsertEmployee`
--
CREATE DEFINER = 'dev'@'%'
PROCEDURE Proc_InsertEmployee (IN ms_EmployeeId char(36), IN ms_EmployeeCode varchar(20), IN ms_FullName varchar(100), IN ms_DateOfBirth date, IN ms_Gender int, IN ms_IdentityNumber varchar(255), IN ms_IdentityDate date, IN ms_IdentityPlace varchar(255), IN ms_Email varchar(100), IN ms_PhoneNumber varchar(50), IN ms_Address varchar(255), IN ms_TelephoneNumber varchar(50), IN ms_BankAccountNumber varbinary(25), IN ms_BankName varchar(255), IN ms_BankBranchName varchar(255), IN ms_DepartmentId char(36))
BEGIN
  INSERT INTO Employee (EmployeeId,
  EmployeeCode,
  FullName,
  DateOfBirth,
  Gender,
  IdentityNumber,
  IdentityDate,
  IdentityPlace,
  Email,
  PhoneNumber,
  Address,
  TelephoneNumber,
  BankAccountNumber,
  BankName,
  BankBranchName,
  DepartmentId,
  CreatedDate,
  CreatedBy)
    VALUES (UUID(), ms_EmployeeCode, ms_FullName, ms_DateOfBirth, ms_Gender, ms_IdentityNumber, ms_IdentityDate, ms_IdentityPlace, ms_Email, ms_PhoneNumber, ms_Address, ms_TelephoneNumber, ms_BankAccountNumber, ms_BankName, ms_BankBranchName, ms_DepartmentId, NOW(), '');
END
$$

--
-- Create procedure `Proc_GetPaggingEmployee`
--
CREATE DEFINER = 'dev'@'%'
PROCEDURE Proc_GetPaggingEmployee (IN ms_Skip int, IN ms_PageSize int, IN ms_EmployeeFilter varchar(255), INOUT ms_TotalRecord int)
BEGIN

  SET ms_TotalRecord = (SELECT
      COUNT(1)
    FROM Employee e
    WHERE e.EmployeeCode LIKE CONCAT('%', ms_EmployeeFilter, '%')
    OR e.FullName LIKE CONCAT('%', ms_EmployeeFilter, '%'));

  SELECT
    e.*,
    d.DepartmentCode,
    d.DepartmentName
  FROM Employee e
    JOIN Department d
      ON e.DepartmentId = d.DepartmentId
  WHERE e.EmployeeCode LIKE CONCAT('%', ms_EmployeeFilter, '%')
  OR e.FullName LIKE CONCAT('%', ms_EmployeeFilter, '%')
  ORDER BY e.CreatedDate DESC LIMIT ms_PageSize OFFSET ms_Skip;


END
$$

--
-- Create procedure `Proc_GetEmployees`
--
CREATE DEFINER = 'dev'@'%'
PROCEDURE Proc_GetEmployees ()
BEGIN
  SELECT
    e.*,
    d.DepartmentCode,
    d.DepartmentName
  FROM Employee e
    JOIN Department d
      ON e.DepartmentId = d.DepartmentId;
END
$$

--
-- Create procedure `Proc_GetEmployeeById`
--
CREATE DEFINER = 'dev'@'%'
PROCEDURE Proc_GetEmployeeById (IN ms_EmployeeId char(36))
BEGIN
  SELECT
    *
  FROM Employee e
  WHERE e.EmployeeId = ms_EmployeeId;
END
$$

--
-- Create procedure `Proc_DeleteEmployee`
--
CREATE DEFINER = 'dev'@'%'
PROCEDURE Proc_DeleteEmployee (IN ms_EmployeeId char(36))
BEGIN
  DELETE
    FROM Employee
  WHERE EmployeeId = ms_EmployeeId;
END
$$

--
-- Create procedure `Proc_CheckEmployeeCode`
--
CREATE DEFINER = 'dev'@'%'
PROCEDURE Proc_CheckEmployeeCode (IN ms_EmployeeCode varchar(20))
BEGIN
  SELECT
    COUNT(1)
  FROM Employee e
  WHERE e.EmployeeCode = ms_EmployeeCode;
END
$$

DELIMITER ;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;